#For now comment out the other Linux versions
#TODO: Add the ver 9 and 10 nightly builds and figure out how to let them fail

parameters:
   Allow_Failures: false

jobs:
- job: 
  continueOnError: ${{ parameters.Allow_Failures }}
  condition: succeededOrFailed()
  displayName: "Node Version ${{parameters.NODE_VERSION}} using $(Agent.OS)"
  variables:
    NODE_VERSION: ${{parameters.NODE_VERSION}}
    MAJOR1: "0"
    MAJOR2: "99"

  
  pool:
    vmImage: 'ubuntu-16.04'
  
  steps:
  #Before Install Scripts

  - powershell: |
      # Write your powershell commands here.
      Write-Host "Hello World"
      # Use the environment variables input below to pass secret variables to this script.
      $rc = "7.10"
      $rc2 = $rc.split(".")[0]
      if ($rc.split(".")[0] -gt 4) 
      {
        Write-Host "In the if statement"
        Write-Host $rc2
        Write-Host $env:NODE_VERSION
        Write-Host $env.MAJOR1
        Write-Host $env.major1
        Write-Host '##vso[task.setvariable variable=MAJOR1]42'
        Write-Host $env.MAJOR1
        Write-Host $env.major1
        
        Write-Host $env.MAJOR2
        Write-Host $env.major2
        Write-Host '##vso[task.setvariable variable=MAJOR2]$rc2'
        Write-Host $env.MAJOR2
        Write-Host $env.major2
       
      }
    displayName: "Please Work Powershell" 
    name: getversion

  #Get the version number of Node, so we can use it in conditions
  #- script: |
  ##    IFS='.' read -r -a array <<< "$(NODE_VERSION)"
  #    echo "${array[0]}"
      #echo '##vso[task.setvariable variable=major]"${array[0]}"'
  #    echo '##vso[task.setvariable variable=major]omg'
  #  displayName: "Get major version number of Node"
  #  name: getver
  
  #- script: |
  #    echo $(MAJOR)
  #  displayName: "Output Major Node Version Number"

  - script: |
      exit 1
    displayName: "Simulate build failure"
    condition: eq(variables['NODE_VERSION'], '8.12')

  - script: |
      npm config set shrinkwrap false
    displayName: 'Configure npm: Skip updating shrinkwrap / lock'

  - script: |
      npm rm --silent --save-dev connect-redis
    displayName: 'Remove all non-test dependencies: Remove example dependencies'

  - script: |
      if [[ "$(cut -d. -f1 <<< "$(NODE_VERSION)")" -lt 6 ]]; then
        npm install --silent --save-dev mocha@3.5.3
      fi
    displayName: 'Setup Node.js version-specific dependencies: mocha for testing: use 3.x for Node.js < 6'

  - script: |
      if [[ "$(cut -d. -f1 <<< "$(NODE_VERSION)")" -lt 4 ]]; then
        npm install --silent --save-dev supertest@2.0.0
      fi
    displayName: 'Setup Node.js version-specific dependencies: supertest for http calls: use 2.0.0 for Node.js < 4'
    
  - script: |
      if [[ -d node_modules ]]; then
        npm prune
        npm rebuild
      fi
    displayName: 'Setup Node.js version-specific dependencies: Update Node.js modules: Prune and rebuild node_modules'

  #Finished With Before Install. Time to install dependencies

  #These two steps are required because the language command in Travis sets the node version, 
  #and also does an npm install and an npm test
  - task: NodeTool@0
    displayName: 'Node Tool install $(NODE_VERSION)'
    inputs:
      versionSpec: '$(NODE_VERSION)'
      

  - task: Npm@1
    displayName: 'npm install'
    inputs:
      verbose: false

  #Testing
  - script: |
      npm run test-ci
    displayName: 'Run test script'

  - script: |
      npm run lint
    displayName: 'Run linting'

    #after_script:
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace tokens in **/.coveralls.yml'
    inputs:
      targetFiles: '.coveralls.yml'

      keepToken: true

      tokenPrefix: '___'

      tokenSuffix: '___'
    

  - script: |
      npm install --save-dev coveralls@2.10.0
      node_modules/.bin/coveralls < ./coverage/lcov.info
    displayName: 'Upload coverage to coveralls'
    

  #Copy coverage artifacts to staging and publish them
  - task: CopyFiles@2
    displayName: 'Copy coverage Files To Staging'
    inputs:
      SourceFolder: '$(build.sourcesdirectory)/coverage'
      TargetFolder: '$(build.artifactstagingdirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'

#TODO:  Need to add a publish test results, potentially? I don't know how helpful it will be.
#I don't think there are actual test results to publish.