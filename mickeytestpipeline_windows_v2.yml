jobs:
- job: Windows_MustPass
  strategy:
    maxParallel: 10
    matrix:
      Node 0.10:
        NODE_VERSION: '0.10'
      Node 0.12:
        NODE_VERSION: '0.12'
      Node 1.8:
        NODE_VERSION: '1.8'
      Node 2.5:
        NODE_VERSION: '2.5'
      Node 3.3:
        NODE_VERSION: '3.3'
      Node 4.9:
        NODE_VERSION: '4.9'
      Node 5.12:
        NODE_VERSION: '5.12'
      Node 6.14:
        NODE_VERSION: '6.14'
      Node 7.10:
        NODE_VERSION: '7.10'
      Node 8.12:
        NODE_VERSION: '8.12'

  continueOnError: false
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - powershell: |
      $nodeVersion = "$(NODE_VERSION)"
      $nodeMajorVersion = $nodeVersion.split(".")[0]
      Write-Output ("##vso[task.setvariable variable=NodeMajorVersion;]$nodeMajorVersion")
    displayName: "Get Major Version Number of NodeJS Using PowerShell"

  - powershell: |
      $env:PROCESSOR_ARCHITECTURE
      import-module .\NodeVersionManager.psm1 -force
      $iojsValues = '1.8','2.5','3.3'
      if ($(NODE_VERSION) -In $iojsValues)
      {
        Write-Information ("iojs")
        $iojsUrl = "https://iojs.org/dist/index.json"
        $iojsList = Invoke-WebRequest -Uri $iojsUrl
        $iojsConverted = ConvertFrom-Json -InputObject $iojsList
        $matchValues = $iojsConverted | Where-Object {$_.version -match "v$(NODE_VERSION)"}
        $matchValues[0]
        Install-iojsVersion $matchValues[0].version
        Set-iojsVersion $matchValues[0].version
        node --version
        $x = $matchValues[0].version
        Write-Output ("##vso[task.setvariable variable=FullNodeVersion;]$x")
        $y = "Set-iojsVersion"
        Write-Output ("##vso[task.setvariable variable=SetNodeMethod;]$y")
      }
      else
      {
        Write-Information("nodejs")
        $nodejsUrl = "https://nodejs.org/dist/index.json"
        $nodejsList = Invoke-WebRequest -Uri $nodejsUrl
        $nodejsConverted = ConvertFrom-Json -InputObject $nodejsList
        $matchValues = $nodejsConverted | Where-Object {$_.version -match "v$(NODE_VERSION)"}
        $matchValues[0]
        Install-nodeVersion $matchValues[0].version
        Set-nodeVersion $matchValues[0].version
        node --version
        $x = $matchValues[0].version
        Write-Output ("##vso[task.setvariable variable=FullNodeVersion;]$x")
        $y = "Set-nodeVersion"
        Write-Output ("##vso[task.setvariable variable=SetNodeMethod;]$y")
      }
    displayName: "Determine whether to use node.js or iojs"

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      node --version
    displayName: "Node Version"

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      npm --version
    displayName: "NPM Version"

  #Start The Before Install Tasks 
  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      npm config set shrinkwrap false
    displayName: 'Skip updating shrinkwrap / lock'

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      npm rm --silent --save-dev connect-redis
    displayName: 'Remove all non-test dependencies'

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      npm install --silent --save-dev mocha@3.5.3
    displayName: 'Setup Node.js version-specific dependencies: mocha for testing: use 3.x for Node.js < 6'
    condition: lt(variables['NodeMajorVersion'], 6)

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      npm install --silent --save-dev supertest@2.0.0
    displayName: 'Setup Node.js version-specific dependencies: supertest for http calls: use 2.0.0 for Node.js < 4'
    condition: lt(variables['NodeMajorVersion'], 4)
    
  - powershell: |
      # Prune & rebuild node_modules
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      if (Test-Path -Path node_modules) {
          npm prune
          npm rebuild
        }
    displayName: 'Update Node.js modules'

#Finish With Before Install Tasks. Time to install dependencies

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      npm install
    displayName: 'npm install'
    
  #Testing
  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      npm run test-ci
    displayName: 'Run test script'

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $(SetNodeMethod) $(FullNodeVersion)
      npm run lint
    displayName: 'Run linting'