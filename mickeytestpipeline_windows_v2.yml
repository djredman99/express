jobs:
- job: Windows_MustPass
  strategy:
    maxParallel: 10
    matrix:
      Node 2.5:
        NODE_VERSION: '2.5'

  continueOnError: false
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - powershell: |
      $nodeVersion = "$(NODE_VERSION)"
      $nodeMajorVersion = $nodeVersion.split(".")[0]
      Write-Output ("##vso[task.setvariable variable=NodeMajorVersion;]$nodeMajorVersion")
    displayName: "Get Major Version Number of NodeJS Using PowerShell"

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      $iojsValues = '1.8','2.5','3.3'
      if ($(NODE_VERSION) -In $iojsValues)
      {
        $iojsUrl = "https://iojs.org/dist/index.json"
        $iojsList = Invoke-WebRequest -Uri $iojsUrl
        $iojsConverted = ConvertFrom-Json -InputObject $iojsList
        $matchValues = $iojsConverted | Where-Object {$_.version -match "v$(NODE_VERSION)"}
        $matchValues[0]
        Install-iojsVersion $matchValues[0].version
        Set-iojsVersion $matchValues[0].version
        node --version
        $x = $matchValues[0].version
        Write-Output ("##vso[task.setvariable variable=FullNodeVersion;]$x")
      }
      else
      {
        $z = "else statement"
        $z
      }
    displayName: "Determine whether to use node.js or iojs"

  - powershell: |
     
      node --version
    displayName: "Node Version"

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      Set-iojsVersion $(FullNodeVersion)
      npm --version
    displayName: "NPM Version"

  #Start The Before Install Tasks 
  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      Set-iojsVersion $(FullNodeVersion)
      npm config set shrinkwrap false
    displayName: 'Skip updating shrinkwrap / lock'

  - powershell: |
      import-module .\NodeVersionManager.psm1 -force
      Set-iojsVersion $(FullNodeVersion)
      npm rm --silent --save-dev connect-redis
    displayName: 'Remove all non-test dependencies'

  - script: |
      npm install --silent --save-dev mocha@3.5.3
    displayName: 'Setup Node.js version-specific dependencies: mocha for testing: use 3.x for Node.js < 6'
    condition: lt(variables['NodeMajorVersion'], 6)

  - script: |
      npm install --silent --save-dev supertest@2.0.0
    displayName: 'Setup Node.js version-specific dependencies: supertest for http calls: use 2.0.0 for Node.js < 4'
    condition: lt(variables['NodeMajorVersion'], 4)
    
  - powershell: |
      # Prune & rebuild node_modules
      if (Test-Path -Path node_modules) {
          npm prune
          npm rebuild
        }
    displayName: 'Update Node.js modules'

#Finish With Before Install Tasks. Time to install dependencies

  - script: |
      npm install
    displayName: 'npm install'
    
  #Testing
  - script: |
      npm run test-ci
    displayName: 'Run test script'

  - script: |
      npm run lint
    displayName: 'Run linting'